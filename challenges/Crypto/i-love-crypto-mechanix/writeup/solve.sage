from Crypto.Util.number import long_to_bytes

p = 186635132765484126250996539793206145667
N = 58875529304338905505953736667221291201023306734480969247806744848754691476474059614663016432386992446676367074190570583945448346734199513681690392081616727023248926447123883344310985916849639888321099825559426707949564522612871413289064362345332045923908212157578793253630638285901734823301475623394385357159
c1 = 45714565771547930229226359824324184612765804704488147361405122171431410830457625531894507696079301820876695796609440647494597444433096375990065249515774077523541239928616914554861842429334485025363517166565849602924745902936379628721161367954518076487229592008473203339185677650566708246361459229275716576568
c2 = 2938205115049708668056485138176403871361086853648934101627506232566239668541574581519458081557120773367632388591435452676969637296270182244964860487777690358171660162952614090569560548502878423451486434716376263912348986733178496729565668523867452903707337375044080831942666690338685816022188990893636320298
c3 = 34981007099734837238533299758138649644651788051104771864691106724937500933145648874428721015045379341994110064523365875150245487954955323710192812559532234986873511482994229494347841043885794519388227924113364604772627940274894512640323396807771050836451224652645782605991571363112070128949113272566961274576
hints = [5817979666070064699383212732256070495, 122803915435033307307080628491122907417, 96413833466614190818049520251833161905]

def breakLCG(x0,x1,x2,m):
    a = (x2-x1)*pow(x1-x0,-1,m)%m
    b = (x1-x0*a)%m
    return (a,b)

def revLCG(state,a,b,m):
    return (state - b)*pow(a,-1,m)%m


x0,x1,x2 = hints
a,b = breakLCG(x0,x1,x2,p)
outputs = []
state = hints[0]
for i in range(6):
    state = revLCG(state,a,b,p)
    outputs.insert(0,state)

mat = matrix([
    [outputs[0]^3,3*outputs[0]^2*outputs[1],3*outputs[0]*outputs[1]^2, outputs[1]^3, c1],
    [outputs[2]^3,3*outputs[2]^2*outputs[3],3*outputs[2]*outputs[3]^2, outputs[3]^3, c2],
    [outputs[4]^3,3*outputs[4]^2*outputs[5],3*outputs[4]*outputs[5]^2, outputs[5]^3, c3],
       ]) % N # If this part does not work on your machine you may need to get a newer version of sagemath and compile it
mat[1] = (mat[1]-mat[0]*pow(mat[0][0],-1,N)*mat[1][0])%N # eleminate the first column
mat[2] = (mat[2]-mat[0]*pow(mat[0][0],-1,N)*mat[2][0])%N 

mat[2] = (mat[2]-mat[1]*pow(mat[1][1],-1,N)*mat[2][1])%N # eleminate the second column

A, B, C = mat[2][2:]

f = (C-B)*pow(A,-1,N)%N
print(long_to_bytes(f).decode())